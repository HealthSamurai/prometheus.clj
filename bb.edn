{:deps  {}
 :tasks {:requires    ([babashka.fs :as fs])
         ;; helpers and constants
         :init        (println "init")
         :enter       (do)
         :leave       (do)
         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
         ;; commands


         repl         {:doc  "Run Clojure repl for Emacs with cider"
                       :task (clojure "-M:cider/nrepl")}

         outdated     {:doc  "Check for outdated dependencies"
                       :task (clojure (str "-M:outdated " (apply str (interpose " " *command-line-args*))))}

         bump         {:doc  "Bump version artifact in `project-version` file, level may be one of: major, minor, patch, alpha, beta, rc, release."
                       :task (let [param (first *command-line-args*)
                                   level (or (#{"major" "minor" "patch" "alpha" "beta" "rc" "release"} param) "patch")]
                               (shell {:out version-file} (format "bb -f scripts/bump-semver.clj %s %s" version-id level))
                               (println version-id "->" (clojure.string/trim (slurp version-file))))}

         test         {:doc  "Run tests"
                       :task (clojure (str "-M:test " (apply str (interpose " " *command-line-args*))))}

         format       {:doc  "Format source code"
                       :task (do (shell "cljstyle fix"))}

         lint         {:doc  "Lint source code"
                       :task (do (shell "clj-kondo --parallel --lint src:test:dev/src")
                                 (shell "cljstyle check"))}}}
